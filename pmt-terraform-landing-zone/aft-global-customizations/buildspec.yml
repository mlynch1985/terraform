# Â© 2024 Amazon Web Services, Inc. or its affiliates. All Rights Reserved.
# This AWS Content is provided subject to the terms of the AWS Customer Agreement available at
# http://aws.amazon.com/agreement or other written agreement between Customer and either
# Amazon Web Services, Inc. or Amazon Web Services EMEA SARL or both.
version: 0.2

phases:
  install:
    commands:
      - set -e

      - |
        # Populate Required Variables
        DEFAULT_PATH=$(pwd)
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
        TF_VERSION=$(aws ssm get-parameter --name "/aft/config/terraform/version" --query "Parameter.Value" --output text)
        TF_DISTRIBUTION=$(aws ssm get-parameter --name "/aft/config/terraform/distribution" --query "Parameter.Value" --output text)
        CT_MGMT_REGION=$(aws ssm get-parameter --name "/aft/config/ct-management-region" --query "Parameter.Value" --output text)
        AFT_MGMT_ACCOUNT=$(aws ssm get-parameter --name "/aft/account/aft-management/account-id" --query "Parameter.Value" --output text)
        AFT_EXEC_ROLE_ARN=arn:$AWS_PARTITION:iam::$AFT_MGMT_ACCOUNT:role/AWSAFTExecution
        VENDED_EXEC_ROLE_ARN=arn:$AWS_PARTITION:iam::$VENDED_ACCOUNT_ID:role/AWSAFTExecution
        AFT_ADMIN_ROLE_NAME=$(aws ssm get-parameter --name /aft/resources/iam/aft-administrator-role-name | jq --raw-output ".Parameter.Value")
        AFT_ADMIN_ROLE_ARN=arn:$AWS_PARTITION:iam::$AFT_MGMT_ACCOUNT:role/$AFT_ADMIN_ROLE_NAME
        ROLE_SESSION_NAME=$(aws ssm get-parameter --name /aft/resources/iam/aft-session-name | jq --raw-output ".Parameter.Value")

        # Configure Development SSH Key
        ssh_key_parameter=$(aws ssm get-parameter --name /aft/config/aft-ssh-key --with-decryption 2> /dev/null || echo "None")
        if [[ $ssh_key_parameter != "None" ]]; then
          ssh_key=$(jq --raw-output ".Parameter.Value" <<< $ssh_key_parameter)
          mkdir -p ~/.ssh
          echo "Host *" >> ~/.ssh/config
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          echo "UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          echo "$ssh_key" > ~/.ssh/ssh_key
          echo -e "\n\n" >>  ~/.ssh/ssh_key
          chmod 600 ~/.ssh/ssh_key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/ssh_key
        fi

        # Clone AFT Source Code
        AWS_MODULE_SOURCE=$(aws ssm get-parameter --name "/aft/config/aft-pipeline-code-source/repo-url" --query "Parameter.Value" --output text)
        AWS_MODULE_GIT_REF=$(aws ssm get-parameter --name "/aft/config/aft-pipeline-code-source/repo-git-ref" --query "Parameter.Value" --output text)
        git config --global credential.helper '!aws codecommit credential-helper $@'
        git config --global credential.UseHttpPath true
        git clone --quiet -b $AWS_MODULE_GIT_REF $AWS_MODULE_SOURCE aws-aft-core-framework

        # Install AFT Python Dependencies
        python3 -m venv $DEFAULT_PATH/aft-venv
        $DEFAULT_PATH/aft-venv/bin/pip install pip==22.1.2
        $DEFAULT_PATH/aft-venv/bin/pip install jinja2-cli==0.7.0 Jinja2==3.0.1 MarkupSafe==2.0.1 boto3==1.18.56 requests==2.26.0

        # Install API Helper Python Dependencies
        python3 -m venv $DEFAULT_PATH/api-helpers-venv
        $DEFAULT_PATH/api-helpers-venv/bin/pip install -r $DEFAULT_PATH/api_helpers/python/requirements.txt

        # Mark helper scripts as executable
        chmod +x $DEFAULT_PATH/api_helpers/pre-api-helpers.sh
        chmod +x $DEFAULT_PATH/api_helpers/post-api-helpers.sh

        # Generate session profiles
        chmod +x $DEFAULT_PATH/aws-aft-core-framework/sources/scripts/creds.sh
        $DEFAULT_PATH/aws-aft-core-framework/sources/scripts/creds.sh

  pre_build:
    on-failure: ABORT
    commands:
      - |
        source $DEFAULT_PATH/api-helpers-venv/bin/activate
        export AWS_PROFILE=aft-target
        $DEFAULT_PATH/api_helpers/pre-api-helpers.sh
        unset AWS_PROFILE

  build:
    on-failure: ABORT
    commands:
      - |
        # Populate Required Variables
        source $DEFAULT_PATH/aft-venv/bin/activate

        TF_BACKEND_REGION=$(aws ssm get-parameter --name "/aft/config/oss-backend/primary-region" --query "Parameter.Value" --output text)
        TF_KMS_KEY_ID=$(aws ssm get-parameter --name "/aft/config/oss-backend/kms-key-id" --query "Parameter.Value" --output text)
        TF_DDB_TABLE=$(aws ssm get-parameter --name "/aft/config/oss-backend/table-id" --query "Parameter.Value" --output text)
        TF_S3_BUCKET=$(aws ssm get-parameter --name "/aft/config/oss-backend/bucket-id" --query "Parameter.Value" --output text)
        TF_S3_KEY=$VENDED_ACCOUNT_ID-aft-global-customizations/terraform.tfstate

        # Install Terraform
        cd /tmp
        echo "Installing Terraform"
        curl -q -o terraform_${TF_VERSION}_linux_amd64.zip https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
        mkdir -p /opt/aft/bin
        unzip -q -o terraform_${TF_VERSION}_linux_amd64.zip
        mv terraform /opt/aft/bin
        /opt/aft/bin/terraform -no-color --version

        # Execute Jinja to setup our backend and provider configurations
        cd $DEFAULT_PATH/terraform
        for f in *.jinja; do jinja2 $f -D timestamp="$TIMESTAMP" -D tf_distribution_type=$TF_DISTRIBUTION -D provider_region=$CT_MGMT_REGION -D region=$TF_BACKEND_REGION -D aft_admin_role_arn=$AFT_EXEC_ROLE_ARN -D target_admin_role_arn=$VENDED_EXEC_ROLE_ARN -D bucket=$TF_S3_BUCKET -D key=$TF_S3_KEY -D dynamodb_table=$TF_DDB_TABLE -D kms_key_id=$TF_KMS_KEY_ID >> ./$(basename $f .jinja).tf; done

        cd $DEFAULT_PATH/terraform
        export AWS_PROFILE=aft-management-admin

        # Set our required variables
        TF_PLAN_BIN="/tmp/tfplan.bin"
        TF_PLAN_JSON="/tmp/tfplan.json"
        OPA_SCAN_OUTPUT="/tmp/opa_scan_output.json"

        # Create our error handler function to reuse later
        capture_errors() {
          if [ $? -ne 0 ]; then
            echo -e "ERROR: $1 \n"
            echo $?
            sleep 15
            aws codebuild stop-build --id $CODEBUILD_BUILD_ID
          fi
        }

        # Initialize Terraform
        /opt/aft/bin/terraform init -no-color

        # Generate a Terraform Plan file and convert to JSON format needed by OPA
        /opt/aft/bin/terraform plan -input=false -refresh -no-color -out=$TF_PLAN_BIN
        capture_errors "Failed to execute terraform plan"

        /opt/aft/bin/terraform show -json $TF_PLAN_BIN > $TF_PLAN_JSON
        capture_errors "Failed to convert TF plan to JSON format"

        # Install and execute our OPA Scan
        curl -L -o /opt/aft/bin/opa https://github.com/open-policy-agent/opa/releases/download/v0.54.0/opa_linux_amd64 && chmod 755 /opt/aft/bin/opa
        /opt/aft/bin/opa eval "data.aws" --data=$DEFAULT_PATH/opa-rules/ --format=pretty --input=$TF_PLAN_JSON > $OPA_SCAN_OUTPUT
        capture_errors "Failed to execute OPA scan"

        OPA_FINDINGS=$(jq -r '.. | .message? | select(. != null)' $OPA_SCAN_OUTPUT | jq -s 'length')

        echo -e "\nOPA Scan Failure Count: $OPA_FINDINGS\n"
        jq -r '.. | .message? | select(. != null)' $OPA_SCAN_OUTPUT

        # Test and report if OPA has any findings
        if [[ $OPA_FINDINGS -gt 0 ]]; then
          echo -e "\nERROR: OPA Scan failed $OPA_FINDINGS test(s). Please review the above messages on guidance of how to resolve the OPA_FINDINGS"
          echo -e "\nINFO: Stopping CodeBuild job execution...\n"
          sleep 15
          aws codebuild stop-build --id $CODEBUILD_BUILD_ID
        fi

        # If all is clear, proceed with applying our desired changes
        /opt/aft/bin/terraform apply -no-color $TF_PLAN_BIN
        capture_errors "Failed to execute terraform apply"

  post_build:
    on-failure: ABORT
    commands:
      - |
        export PYTHONPATH="$DEFAULT_PATH/aws-aft-core-framework/sources/aft-lambda-layer:$PYTHONPATH"
        export AWS_PROFILE=aft-management
        python3 $DEFAULT_PATH/aws-aft-core-framework/sources/aft-lambda-layer/aft_common/metrics.py --codebuild-name "aft-global-customizations" --codebuild-status $CODEBUILD_BUILD_SUCCEEDING
        unset AWS_PROFILE

      - |
        if [[ $CODEBUILD_BUILD_SUCCEEDING == 0 ]]; then
          exit 1
        fi

      - |
        source $DEFAULT_PATH/api-helpers-venv/bin/activate
        export AWS_PROFILE=aft-target
        $DEFAULT_PATH/api_helpers/post-api-helpers.sh
